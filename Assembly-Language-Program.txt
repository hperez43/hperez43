   ORG 100
   FST, SKI		// look for input
	BUN FST		// no input
	CLA  		// clear AC
	INP   		// input to AC
	STA IN		// store input
	BSA FMT		// formatting output

	LDA IN
	ADD MIN		// changing character to decimal
	STA IN	 	// storing input as decimal for tracking
	STA B		// storing input in b variable for multiplication

 	BSA MLT		// function to multiply A*B
	BSA LOP		// recursive function and set MLT variables

	LDA A
	ADD 6T		// Check if Hexadecimal conversion is needed
	SNA		// Skip if conversion not necessary
	BSA HXD		// Jump to Hexadecimal conversion function

        LDA A		// Final Product IF < 16
	STA C3		

     Z, CLA		// return from hexadecimal conversion
	LDA C1		// printing out calculated factorial
	OUT
	CLA
	LDA C2
	OUT
	CLA
	LDA C3
	ADD RTN
	OUT
HLT	// quit


//Program labels
 IN, DEC 0	// Constant to hold input

//Labels for MLT function
  A, DEC 1	// Multiplier, A = A*B
  B, DEC 0	// Multiplicand, input, B = B - 1
  P, DEC 0	// Product holder
CTR, DEC -16	// Count for multiplication
RCT, DEC -16	// Reset count
  N, DEC 0	// B - 1
 
//Output formatting
MIN, DEC -48	// Character adjustment
RTN, DEC 48	// Return character adjustment
LTR, DEC -10	// Check for conversion to letters
CHR, DEC 7	// Adjustment needed to print ABCDEF

!, HEX 21	// output format '!'
S, HEX 20	// output format ' '
=, HEX 3D	// output format '='

//Labels for HXD function
6T, DEC -16	// subtract until remainder is reached
C1, DEC 0	// C00 first output, third remainder
C2, DEC 0	// 0C0 second output, second remainder
C3, DEC 0	// 00C third output, first remainder
D1, DEC 0	// track number of times 6T is subtracted



//OUTPUT FORMAT: "B! = P"
   FMT, HEX 0
	OUT  	  
	CLA   
	LDA !
	OUT
	CLA
	LDA S
	OUT
	CLA
	LDA =
	OUT
	CLA
	LDA S
	OUT
	CLA
	BUN FMT I

//Multiply 2 numbers
   MLT, HEX 0
	CLE	// Clear E
	LDA A	// Load multiplier
	CIR	// Transfer multiplier bit to E
	STA A	// Store shifted multiplier

	SZE	// If bit is zero, skip
	BUN ONE	// Jump to One
	BUN ZRO	// Jump to Zero

   ONE, LDA B	// Load multiplicand
	ADD P	// Add to partial product
	STA P	// Store product
	CLE	// Clear E

   ZRO, LDA B	// Load multiplicand
	CIL	// Shift left
	STA B	// Store multiplicand

	ISZ CTR	// increment counter, skip if Zero
	BUN MLT 
	BUN MLT I

//Loop reset
   LOP, HEX 0
	LDA P	// product calculated from MLT function
	STA A	// A = A*B, load product

	LDA RCT	// reset counter
	STA CTR	// store reset
	LDA N	// B - 1
	STA P	// reset product for next MLT
	CMA	// complement
	ADD IN	// add complement
	SNA	// CONTROL FOR INPUT OF 0
	STA IN	// store next B multiplicand
	LDA IN 
	STA B	// set B again

	LDA IN	// Check if count is down to zero
	SZA	// skip if zero
	BUN MLT
	BUN LOP I

//Converting to Hexadecimal
   HXD, HEX 0
	LDA A	// load final product from MLT
	STA C3	// prepare for division

   HC3, ADD 6T	// subtract 16
	SNA
	STA C3	// store remainder, skip if negative
	SNA
	ISZ D1	// track number of times 6T is subtracted
	SNA
	BUN HC3 // loop to subtract again if C3 > 16
	
	LDA D1	// next level of division
	BSA RL	// reset variables for level of division
	LDA C2	// prepare for division

   HC2, ADD 6T	// subtract 16
	SNA
	STA C2	// store remainder, skip if negative
	SNA
	ISZ D1	// track number of times 6T is subtracted
	SNA
	BUN HC2	// loop to subtract again if C2 > 16

	LDA D1	// next level of division
	STA C1	// prepare for division

   HC1, ADD 6T	// subtract 16
	SNA
	STA C1	// store remainder, skip if negative
	SNA
	BUN HC1	// loop to subtract again if C1 > 16

//Reformatting Hexadecimals for output
	LDA C1	// C00
	SZA	// ignore if C1 = 0
	ADD RTN	// return to character output
	STA C1	// store character

	LDA C2 	// 0C0
	ADD LTR	// check if needs to be converted to letter
	SNA
	BSA LF	// If letter conversion is needed skip to this function
	LDA C2
	SZA	// ignore if C2 = 0
	ADD RTN	// return to character output
	STA C2	// store character
	
	BUN Z	// end hexadecimal conversion

//Reloading for HXD division
    RL, HEX 0
	LDA D1	// number of times 16 is subtracted
	STA C2	// load number for the next division
	LDA N	// load 0
	STA D1	// tracking is reset to 0
	BUN RL I

//Letter formatting for HXD conversion
  LF, HEX 0
	LDA C2	// number to be reformat
	ADD CHR	// adjustment needed to print ABCDEF
	STA C2	// store adjusted number
	BUN LF I 

 
END